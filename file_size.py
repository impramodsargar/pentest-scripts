import os

def convert_bytes_to_readable(size_in_bytes):
    # Function to convert bytes to a human-readable format
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_in_bytes < 1024.0:
            break
        size_in_bytes /= 1024.0
    return size_in_bytes, unit

def get_file_sizes(path):
    file_sizes = []
    largest_file_size = 0
    largest_file_path = ""
    total_size = 0

    for foldername, subfolders, filenames in os.walk(path):
        for filename in filenames:
            file_path = os.path.join(foldername, filename)
            size_in_bytes = os.path.getsize(file_path)
            size, unit = convert_bytes_to_readable(size_in_bytes)
            file_sizes.append((file_path, size, unit))
            total_size += size_in_bytes

            # Track the largest file
            if size_in_bytes > largest_file_size:
                largest_file_size = size_in_bytes
                largest_file_path = file_path

    return file_sizes, largest_file_path, largest_file_size, total_size

def main():
    drive_path = 'C:\\'  # Replace with the path to the drive you want to check

    if os.path.exists(drive_path):
        file_sizes, largest_file_path, largest_file_size, total_size = get_file_sizes(drive_path)
        file_sizes.sort(key=lambda x: x[1], reverse=True)  # Sort by file size, largest first

        for file_path, size, unit in file_sizes:
            print(f"{file_path} - {size:.2f} {unit}")

        largest_size, largest_unit = convert_bytes_to_readable(largest_file_size)
        total_size, total_unit = convert_bytes_to_readable(total_size)
        
        print(f"\nLargest File: {largest_file_path} - {largest_size:.2f} {largest_unit}")
        print(f"Total Storage Used: {total_size:.2f} {total_unit}")

    else:
        print(f"The specified drive path '{drive_path}' does not exist.")

if __name__ == "__main__":
    main()
